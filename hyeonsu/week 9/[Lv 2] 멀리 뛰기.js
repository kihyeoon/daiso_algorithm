function solution(n) {
  // 1,2 로 n을 만드는데 방법이 몇개인가?
  // 일단 1을 계속 더해서 만들 수 있다.
  // n이 2 이하라면 n을 리턴하면 된다!
  // 3부터 홀수는 4의 배수로 커짐
  // 4부터 짝수는 5의 배수로 커짐
  if (n <= 3) return n;
  const answer = (solution(n - 1) % 1234567) + (solution(n - 2) % 1234567);
  return answer;

  // 피보나치 수열임
  // 1 2 3 5 8 13
  // 6이라면
  // 1 1 1 1 1 1
  // 1 1 1 1 2 ~ 5개
  // 2 2 1 1
  // 2 1 2 1
  // 2 1 1 2
  // 1 2 2 1
  // 1 1 2 2
  // 1 2 1 2
  // 2 2 2
  // 13가지

  // 5라면
  // 1-1-1-1-1
  // 1-1-1-2
  // 1-1-2-1
  // 1-2-1-1
  // 2-1-1-1
  // 2-2-1
  // 2-1-2
  // 1-2-2
  // 이렇게 8가지

  // 4 라면
  // 1-1-1-1
  // 1-2-1
  // 1-1-2
  // 2-1-1
  // 2-2
  // 이렇게 5가지

  // 3이라면
  // 1-1-1
  // 1-2
  // 2-1
  // 이렇게 3가지

  // 2라면
  // 1-1 2
  // 이렇게 2가지
}

function solution(n) {
  const dp = [0, 1, 2];
  if (n < 3) return dp[n];
  for (let i = 3; i <= n; i++) {
    dp[i] = (dp[i - 1] + dp[i - 2]) % 1234567;
  }
  return dp[n];
}